const assert = require('assert')
const canvas = require('../components/consoleCanvas')

describe('Testing consoleCanvas',() => {
    /**
     * unit test check if canvas is ready for use
     */
    it('should not draw line in canvas without it being ready',() => {
        canvas.drawLine(0,0,0,5)
        assert.strictEqual(canvas.isReady(),false)
    })

    /**
     * unit test create canvas
     */
    it('should create a canvas of given width and height + padding of 2 cols and 2 rows and also check if canvas is ready',() => {
        const rows = 4
        const cols = 20
        canvas.create(cols,rows)
        const expected = [
            ['-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'],
            ['|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'], 
            ['|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'], 
            ['|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'], 
            ['|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'], 
            ['-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-']
        ]
        assert.deepStrictEqual(canvas.getBuffer(),expected)
        assert.strictEqual(canvas.isReady(),true)
    })

    /**
     * unit test draw horizontal line in canvas
     */
    it('draw horizontal line from (1,2) to (6,2)', () => {
        canvas.drawLine(1,2,6,2,'x')
        assert.deepStrictEqual(canvas.getBuffer(),[
        ['-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'],
        ['|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'], 
        ['|','x','x','x','x','x','x',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'], 
        ['|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'], 
        ['|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'], 
        ['-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'] ])
     })

     /**
     * unit test draw rectangle in canvas
     */
    it('draw rectangle from (14,1) to (18,3)',() => {
        canvas.drawRectangle(14,1,18,3,'x');
        assert.deepStrictEqual(canvas.getBuffer(),[
       ['-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'],
       ['|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','x','x','x','x','x',' ',' ','|'], 
       ['|','x','x','x','x','x','x',' ',' ',' ',' ',' ',' ',' ','x',' ',' ',' ','x',' ',' ','|'], 
       ['|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','x','x','x','x','x',' ',' ','|'], 
       ['|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'], 
       ['-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'] ])

    })

    /**
     * unit test bucket fill in canvas
     */
    it('bucket fill canvas from (10,3)',function() {
        canvas.bucketFill(10,3,'o');
        assert.deepStrictEqual(canvas.getBuffer(),[
       ['-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'],
       ['|','o','o','o','o','o','o','o','o','o','o','o','o','o','x','x','x','x','x','o','o','|'], 
       ['|','x','x','x','x','x','x','o','o','o','o','o','o','o','x',' ',' ',' ','x','o','o','|'], 
       ['|','o','o','o','o','o','o','o','o','o','o','o','o','o','x','x','x','x','x','o','o','|'], 
       ['|','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','|'], 
       ['-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'] ])
    });



    
})